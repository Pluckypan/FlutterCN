import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static S current;

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get about => "About";
  String get animation => "Animation";
  String get appName => "FlutterCN";
  String get beijing => "Beijing";
  String get coming_soon => "Coming Soon";
  String get english => "English";
  String get home => "Home";
  String get lab => "Lab";
  String get language => "language";
  String get native_call => "Call Native";
  String get official_sample => "Official Sample";
  String get profile => "Profile";
  String get settings => "Settings";
  String get simple_chinese => "Simple Chinese";
  String get sunny => "Sunny";
  String get theme => "theme";
  String get theme_blue => "Blue Theme";
  String get theme_pink => "Pink Theme";
  String get third_party_libs => "Third Party Libs";
  String get widget => "Widgets";
  String counting(String time) => "$time s";
  String messageFrom(String user, String age) => "Message from:$user $age";
}

class $en extends S {
  const $en();
}

class $zh_CN extends S {
  const $zh_CN();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get third_party_libs => "第三方类库";
  @override
  String get settings => "设置";
  @override
  String get widget => "常用控件";
  @override
  String get theme_blue => "蓝色主题";
  @override
  String get appName => "FlutterCN";
  @override
  String get profile => "个人资料";
  @override
  String get about => "关于";
  @override
  String get language => "语言";
  @override
  String get beijing => "北京";
  @override
  String get lab => "实验室";
  @override
  String get home => "首页";
  @override
  String get animation => "动画专题";
  @override
  String get coming_soon => "正在开发中...";
  @override
  String get theme_pink => "粉色主题";
  @override
  String get english => "英语";
  @override
  String get simple_chinese => "简体中文";
  @override
  String get official_sample => "官方示例";
  @override
  String get theme => "主题";
  @override
  String get sunny => "晴";
  @override
  String get native_call => "原生交互";
  @override
  String counting(String time) => "倒计时($time)";
  @override
  String messageFrom(String user, String age) => "天堂来信:$user $age";
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", ""),
      Locale("zh", "CN"),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "en":
          S.current = const $en();
          return SynchronousFuture<S>(S.current);
        case "zh_CN":
          S.current = const $zh_CN();
          return SynchronousFuture<S>(S.current);
        default:
          // NO-OP.
      }
    }
    S.current = const S();
    return SynchronousFuture<S>(S.current);
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
